/**
 *
 *
  _____                      _              _ _ _     _   _     _        __ _ _
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|

 * DO NOT EDIT THIS FILE!!
 *
 *  TO CUSTOMIZE APIS IN TableApiGenerated.js PLEASE EDIT ../TableApi.js
 *
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 *
 */
 
// Dependencies
import axios from "axios";
import { properties } from "../../config/properties";

class TableApiGenerated {

  static contextUrl = properties.endpoint + "/table";

  // CRUD METHODS

  /**
  * TableService.create
  *   @description CRUD ACTION create
  *
  */
  static createTable(table) {
    return axios.post(TableApiGenerated.contextUrl, table )
      .then(response => {
        return response.data;
      })
      .catch(error => {
        throw error;
      });
  }

  /**
  * TableService.delete
  *   @description CRUD ACTION delete
  *   @param ObjectId id Id
  *
  */
  static deleteTable(id) {
    return axios.delete(TableApiGenerated.contextUrl + "/" + id)
      .then(response => {
        return response.data;
      })
      .catch(error => {
        throw error;
      });
  }

  /**
  * TableService.findByPlayersList
  *   @description CRUD ACTION findByPlayersList
  *   @param Objectid key Id of the resource PlayersList to search
  *
  */
  static findByPlayersList(id) {
    return axios.get(TableApiGenerated.contextUrl + "/findByPlayersList/" + id )
      .then(response => {
        return response.data;
      })
      .catch(error => {
        throw error;
      });
  }

  /**
  * TableService.findByTablePlayer
  *   @description CRUD ACTION findByTablePlayer
  *   @param Objectid key Id of model to search for
  *
  */
  static findByTablePlayer(id) {
    return axios.get(TableApiGenerated.contextUrl + "/findByTablePlayer/" + id )
      .then(response => {
        return response.data;
      })
      .catch(error => {
        throw error;
      });
  }

  /**
  * TableService.get
  *   @description CRUD ACTION get
  *   @param ObjectId id Id resource
  *
  */
  static getOneTable(id) {
    return axios.get(TableApiGenerated.contextUrl + "/" + id)
      .then(response => {
        return response.data;
      })
      .catch(error => {
        throw error;
      });
  }

  /**
  * TableService.list
  *   @description CRUD ACTION list
  *
  */
  static getTableList() {
    return axios.get(TableApiGenerated.contextUrl)
      .then(response => {
        return response.data;
      })
      .catch(error => {
        throw error;
      });
  }

  /**
  * TableService.update
  *   @description CRUD ACTION update
  *   @param ObjectId id Id
  *
  */
  static saveTable(table) {
    return axios.post(TableApiGenerated.contextUrl + "/" + table._id, table )
      .then(response => {
        return response.data;
      })
      .catch(error => {
        throw error;
      });
  }



    // Custom APIs
  /**
  * TableService.AddPlayerToTable
  *   @returns Boolean
  *
  */
  static AddPlayerToTable(...params) {
    return axios.patch(TableApiGenerated.contextUrl + '/url/{id}' )
      .then(response => {
        return response.data;
      })
      .catch(error => {
        throw error;
      });
  }

  /**
  * TableService.ListTablePlayers
  *   @param String PlayerToAdd
  *   @returns String
  *
  */
  static ListTablePlayers(...params) {
    return axios.get(TableApiGenerated.contextUrl + '/player/{id}' )
      .then(response => {
        return response.data;
      })
      .catch(error => {
        throw error;
      });
  }

}

export default TableApiGenerated;
