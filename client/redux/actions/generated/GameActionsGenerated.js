/**
 *
 *
  _____                      _              _ _ _     _   _     _        __ _ _
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|

 * DO NOT EDIT THIS FILE!!
 *
 *  TO CUSTOMIZE FUNCTIONS IN GameActionsGenerated.js PLEASE EDIT ../GameActions.js
 *
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 *
 */

import * as types from "../../actionTypes";
import GameApi from "../../../api/GameApi";

let actionsFunction = {
  
  // Reset reducer
  reset: function() {
    return { type: types.RESET_GAME };
  },

  //CRUD METHODS

  // Create game
  createGame: function(game) {
    return function(dispatch) {
      return GameApi
        .createGame(game)
        .then(game => {
          dispatch(actionsFunction.createGameSuccess(game));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  createGameSuccess: function(game) {
    return { type: types.CREATE_GAME_SUCCESS, payload: game };
  },


  // Delete game
  deleteGame: function(id) {
    return function(dispatch) {
      return GameApi
        .deleteGame(id)
        .then(game => {
          dispatch(actionsFunction.deleteGameSuccess(game));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  deleteGameSuccess: function(game) {
    return { type: types.DELETE_GAME_SUCCESS, payload: game };
  },


  // Find by GameTables
  findByGameTables: function(key) {
    return function(dispatch) {
      return GameApi
        .findByGameTables(key)
        .then(item => {
          dispatch(actionsFunction.findByGameTablesSuccess(item));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  findByGameTablesSuccess: function(item) {
    return { type: types.FINDBYGAMETABLES_GAME_SUCCESS, payload: item };
  },


  // Get game
  loadGame: function(id) {
    return function(dispatch) {
      return GameApi
        .getOneGame(id)
        .then(game => {
          dispatch(actionsFunction.loadGameSuccess(game));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadGameSuccess: function(game) {
    return { type: types.GET_GAME_SUCCESS, payload: game };
  },

  // Load  list
  loadGameList: function() {
    return function(dispatch) {
      return GameApi
        .getGameList()
        .then(list => {
          dispatch(actionsFunction.loadGameListSuccess(list));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadGameListSuccess: function(list) {
    return { type: types.LIST_GAME_SUCCESS, payload: list };
  },

	
  // Save game
  saveGame: function(game) {
    return function(dispatch) {
      return GameApi
        .saveGame(game)
        .then(game => {
          dispatch(actionsFunction.saveGameSuccess(game));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  saveGameSuccess: function(game) {
    return { type: types.UPDATE_GAME_SUCCESS, payload: game };
  },


  /*
  Name: AddTable
  Description: 
  Params: 
  */
  AddTable: function(...params) {
    return function(dispatch) {
      return GameApi
        .AddTable(params)
        .then( result => {
          dispatch(actionsFunction.AddTableSuccess(result));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  AddTableSuccess: function(result) {
    return { type: types.ADDTABLE_GAME_SUCCESS, payload: result };
  },
		
  /*
  Name: pause
  Description: 
  Params: 
    String ID - 
  */
  pause: function(...params) {
    return function(dispatch) {
      return GameApi
        .pause(params)
        .then( result => {
          dispatch(actionsFunction.pauseSuccess(result));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  pauseSuccess: function(result) {
    return { type: types.PAUSE_GAME_SUCCESS, payload: result };
  },
		
  /*
  Name: stop
  Description: 
  Params: 
  */
  stop: function(...params) {
    return function(dispatch) {
      return GameApi
        .stop(params)
        .then( result => {
          dispatch(actionsFunction.stopSuccess(result));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  stopSuccess: function(result) {
    return { type: types.STOP_GAME_SUCCESS, payload: result };
  },
		
};

export default actionsFunction;
