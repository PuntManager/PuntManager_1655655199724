/**
 *
 *
  _____                      _              _ _ _     _   _     _        __ _ _
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|

 * DO NOT EDIT THIS FILE!!
 *
 *  TO CUSTOMIZE FUNCTIONS IN TableActionsGenerated.js PLEASE EDIT ../TableActions.js
 *
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 *
 */

import * as types from "../../actionTypes";
import TableApi from "../../../api/TableApi";

let actionsFunction = {
  
  // Reset reducer
  reset: function() {
    return { type: types.RESET_TABLE };
  },

  //CRUD METHODS

  // Create table
  createTable: function(table) {
    return function(dispatch) {
      return TableApi
        .createTable(table)
        .then(table => {
          dispatch(actionsFunction.createTableSuccess(table));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  createTableSuccess: function(table) {
    return { type: types.CREATE_TABLE_SUCCESS, payload: table };
  },


  // Delete table
  deleteTable: function(id) {
    return function(dispatch) {
      return TableApi
        .deleteTable(id)
        .then(table => {
          dispatch(actionsFunction.deleteTableSuccess(table));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  deleteTableSuccess: function(table) {
    return { type: types.DELETE_TABLE_SUCCESS, payload: table };
  },


  // Find by PlayersList
  findByPlayersList: function(key) {
    return function(dispatch) {
      return TableApi
        .findByPlayersList(key)
        .then(item => {
          dispatch(actionsFunction.findByPlayersListSuccess(item));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  findByPlayersListSuccess: function(item) {
    return { type: types.FINDBYPLAYERSLIST_TABLE_SUCCESS, payload: item };
  },


  // Find by TablePlayer
  findByTablePlayer: function(key) {
    return function(dispatch) {
      return TableApi
        .findByTablePlayer(key)
        .then(item => {
          dispatch(actionsFunction.findByTablePlayerSuccess(item));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  findByTablePlayerSuccess: function(item) {
    return { type: types.FINDBYTABLEPLAYER_TABLE_SUCCESS, payload: item };
  },


  // Get table
  loadTable: function(id) {
    return function(dispatch) {
      return TableApi
        .getOneTable(id)
        .then(table => {
          dispatch(actionsFunction.loadTableSuccess(table));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadTableSuccess: function(table) {
    return { type: types.GET_TABLE_SUCCESS, payload: table };
  },

  // Load  list
  loadTableList: function() {
    return function(dispatch) {
      return TableApi
        .getTableList()
        .then(list => {
          dispatch(actionsFunction.loadTableListSuccess(list));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadTableListSuccess: function(list) {
    return { type: types.LIST_TABLE_SUCCESS, payload: list };
  },

	
  // Save table
  saveTable: function(table) {
    return function(dispatch) {
      return TableApi
        .saveTable(table)
        .then(table => {
          dispatch(actionsFunction.saveTableSuccess(table));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  saveTableSuccess: function(table) {
    return { type: types.UPDATE_TABLE_SUCCESS, payload: table };
  },


  /*
  Name: AddPlayerToTable
  Description: 
  Params: 
  */
  AddPlayerToTable: function(...params) {
    return function(dispatch) {
      return TableApi
        .AddPlayerToTable(params)
        .then( result => {
          dispatch(actionsFunction.AddPlayerToTableSuccess(result));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  AddPlayerToTableSuccess: function(result) {
    return { type: types.ADDPLAYERTOTABLE_TABLE_SUCCESS, payload: result };
  },
		
  /*
  Name: ListTablePlayers
  Description: 
  Params: 
    String PlayerToAdd - 
  */
  ListTablePlayers: function(...params) {
    return function(dispatch) {
      return TableApi
        .ListTablePlayers(params)
        .then( result => {
          dispatch(actionsFunction.ListTablePlayersSuccess(result));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  ListTablePlayersSuccess: function(result) {
    return { type: types.LISTTABLEPLAYERS_TABLE_SUCCESS, payload: result };
  },
		
};

export default actionsFunction;
